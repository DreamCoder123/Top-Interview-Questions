1) What is Loose Coupling?

Loose coupling : In simple words, loose coupling means they are mostly independent. If the only knowledge that class A has about class B, is what class B has exposed through its interface, then class A and class B are said to be loosely coupled. In order to over come from the problems of tight coupling between objects, spring framework uses dependency injection mechanism with the help of POJO/POJI model and through dependency injection its possible to achieve loose coupling.
Example : If you change your shirt, then you are not forced to change your body – when you can do that, then you have loose coupling. When you can’t do that, then you have tight coupling. The examples of Loose coupling are Interface, JMS.
// Java program to illustrate 
// loose coupling concept
public interface Topic
{
    void understand();
}
class Topic1 implements Topic {
	public void understand()
    	{
        	System.out.println("Got it");
    	}
} class Topic2 implements Topic {
	public void understand()
    	{
        	System.out.println("understand");
    	}
}public class Subject {
	public static void main(String[] args)
    	{
        	Topic t = new Topic1();
        	t.understand();
    	}
}

2) What is Dependency?

A typical Java application will have three layers in its architecture: web, business and data.

The web layer
The business layer
The data layer
In the above scenario:

Web Layer depends on Business Layer. The business layer is a dependency for the web layer.
Business layer depends on Data Layer. The data layer is a dependency for the business layer.

3) What is IOC (Inversion of Control)?
In general, when a class depends on another class then the dependent class creates the object of its
dependency class directly, and then uses(call) its methods, it is called the dependency object created in the main control.
But if some external entity is taking care of creating the dependency object then we say that control is inverted to some external entity, this is called Inversion of Control (IOC).

4) What is Dependency Injection?
Dependency Injection is a fundamental aspect of the Spring framework, through which the Spring container “injects” objects into other objects or “dependencies”.

Simply put, this allows for loose coupling of components and moves the responsibility of managing components onto the container.

5) Can you give few examples of Dependency Injection ?
Example Car Class might need a reference to an Engine class . These required classe are called dependencies and in the example the car class is dependent on having an instance of the  engine class to run.

6) What is Auto Wiring?
Autowiring feature of spring framework enables you to inject the object dependency implicitly. It internally uses setter or constructor injection.
Autowiring can't be used to inject primitive and string values. It works with reference only.
1)	no:-		It is the default autowiring mode. It means no autowiring bydefault.
2)	byName:-	The byName mode injects the object dependency according to name of the bean. In such case, property name and bean name must be same. It 			internally calls setter method.
3)	byType:-	The byType mode injects the object dependency according to type. So property name and bean name can be different. It internally calls setter 			     method.
4)	constructor:-	The constructor mode injects the dependency by calling the constructor of the class. It calls the constructor having large number of 				parameters.
5)	autodetect:-	It is deprecated since Spring 3.

7) What are the important roles of an IOC Container?
	The IoC container is responsible to instantiate, configure and assemble the objects. The IoC container gets informations from the XML file and works 		accordingly. The main tasks performed by IoC container are:
	1) to instantiate the application class
	2) to configure the object
	3) to assemble the dependencies between the objects
	
	There are two types of IoC containers. They are:

	BeanFactory
	ApplicationContext

8) 	What are Bean Factory and Application Context?
	Spring Framework provides two of the most fundamental and important packages, they are the org.springframework.beans and org.springframework.context packages. 		Code in these packages provides the basis for Spring’s Inversion of Control/Dependency Injection features. Spring containers are responsible for creating bean 		objects and injecting them into the classes. The two containers are namely,

	BeanFactory(I) – Available in org.springframework.beans.factory package.
	ApplicationContext(I) – Available in rg.springframework.context package.
	
	The BeanFactory Interface
	This is the root interface for accessing a Spring bean container. It is the actual container that instantiates, configures, and manages a number of beans. 	   These beans collaborate with one another and thus have dependencies between themselves. These dependencies are reflected in the configuration data used by the 	  BeanFactory. This interface is implemented by the objects that hold a number of bean definitions, each uniquely identified by a String name. The most common 	         implementation class used for this BeanFactory is XmlBeanFactory available in org.springframework.beans.factory.xml package. 


	Note: BeanFactory is deprecated from Spring 3.0.

	Example code:
	ClassPathResource resource = new ClassPathResource("beans.xml");
	XmlBeanFactory factory = new XmlBeanFactory(resource);
 
 

	The ApplicationContext Interface
 

	This interface is designed on top of the BeanFactory interface. The ApplicationContext interface is the advanced container that enhances BeanFactory 		functionality in a more framework-oriented style. While the BeanFactory provides basic functionality for managing and manipulating beans, often in a 		programmatic way, the ApplicationContext provides extra functionality like MessageSource, Access to resources, Event propagation to beans, Loading of multiple 		(hierarchical) contexts etc. There are so many implementation classes that can be used such as ClassPathXmlApplicationContext,FileSystemXmlApplicationContext, 		AnnotationConfigWebApplicationContext etc.


	Example code:
	ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
	
	
9) 	Can you compare Bean Factory with Application Context?

	BeanFactory loads beans on-demand, while ApplicationContext loads all beans at startup. Thus, BeanFactory is lightweight as compared to ApplicationContext. 	    Let's understand it with an example.
	
	public class Student {
    public static boolean isBeanInstantiated = false;

    public void postConstruct() {
        setBeanInstantiated(true);
    }
}

10) How do you create an application context with Spring?


